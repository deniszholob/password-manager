# CI/CD for Github Actions
# @author Denis Zholob (deniszholob.com)
# ====================================== #

name: Build Test Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: $(node -pe "require('./package.json').version")
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'

      - name: Install NPM Dependencies
        run: npm run i

      - name: Build
        run: npm run build-and-make

      # Save dist artifacts for deployment jobs
      # https://docs.github.com/en/actions/learn-github-actions/essential-features-of-github-actions#sharing-data-between-jobs
      - name: Archive web demo build
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: web_demo_artifact
          path: dist/apps/web    # Directory to push to GitHub Pages

      - name: Archive electron app build
        # if: github.event == 'push' && success()
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: "Release-$RELEASE_VERSION"
          path: "dist/Password Manager Setup $RELEASE_VERSION.exe"

  # Ref: https://focisolutions.com/2020/04/github-actions-deploying-an-angular-app/
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: web_demo_artifact

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: web_demo_artifact

  #Ref: https://github.com/actions/create-release
  release:
    # if: github.event == 'push'
    runs-on: ubuntu-latest
    needs: build
    env:
      RELEASE_VERSION: $(node -pe "require('./package.json').version")
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: Release-$RELEASE_VERSION

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: $RELEASE_VERSION
          release_name: Release-$RELEASE_VERSION
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true # true to create a draft (unpublished) release, false to create a published one. Default: false
          prerelease: true # true to identify the release as a prerelease. false to identify the release as a full release. Default: false

      # Ref: https://github.com/actions/upload-release-asset
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: Release-$RELEASE_VERSION
          asset_name: Release-$RELEASE_VERSION
          asset_content_type: application/zip
