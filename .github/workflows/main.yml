# CI/CD for Github Actions
# @author Denis Zholob (deniszholob.com)
# ====================================== #

name: Build Test Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  get-release-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.2'

      - name: Set RELEASE_VERSION env var
        run: node -pe "require('./package.json').version" > RELEASE_VERSION.txt

      - name: Archive RELEASE_VERSION
        uses: actions/upload-artifact@v3
        with:
          name: RELEASE_VERSION
          path: RELEASE_VERSION.txt

  # Builds the web app
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.2'
          cache: 'pnpm'

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache node modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: ${{steps.npm-cache-dir.outputs.dir}}
          key: ${{runner.os}}-node-${{hashFiles('**/pnpm-lock.yaml')}}
          restore-keys: |
            ${{runner.os}}-node-
            ${{runner.os}}-

      - name: Install NPM Dependencies
        run: pnpm run i

      - name: Cache Nx
        uses: actions/cache@v3
        with:
          path: node_modules/.cache/nx
          key: cache-nx-${{ hashFiles('pnpm-lock.yaml') }}-build-web-${{ github.sha }}
          restore-keys: |
            cache-nx-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Build
        run: pnpm run build:web

      # Save dist artifacts for deployment jobs
      # https://docs.github.com/en/actions/learn-github-actions/essential-features-of-github-actions#sharing-data-between-jobs
      - name: Archive web demo build
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: web-demo-build
          path: dist/apps/web # Directory to push to GitHub Pages

  # Deploys the web appp to GithubPages
  # @ref: https://focisolutions.com/2020/04/github-actions-deploying-an-angular-app/
  deploy-web:
    runs-on: ubuntu-latest
    needs: build-web
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: web-demo-build
          path: web-demo-build

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: web-demo-build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: web-demo-build

  # Builds the linux executable application
  build-linux:
    runs-on: ubuntu-latest
    needs: [get-release-version, build-web]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.2'
          cache: 'pnpm'

      - name: Download RELEASE_VERSION
        uses: actions/download-artifact@v3
        with:
          name: RELEASE_VERSION

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          echo "RELEASE_VERSION=`cat RELEASE_VERSION.txt`" >> $GITHUB_ENV

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache node modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: ${{steps.npm-cache-dir.outputs.dir}}
          key: ${{runner.os}}-node-${{hashFiles('**/pnpm-lock.yaml')}}
          restore-keys: |
            ${{runner.os}}-node-
            ${{runner.os}}-

      - name: Install NPM Dependencies
        run: pnpm run i

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: web-demo-build
          path: dist/apps/web

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist/apps/web

      - name: Build Linux Package
        run: pnpm run build:electron && pnpm run electron:make:lix

      - name: Display structure of built files
        run: ls -R
        working-directory: dist/executables

      - name: Archive electron app build
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: release-package-${{env.RELEASE_VERSION}}-linux
          path: |
            dist/executables/password-manager_${{env.RELEASE_VERSION}}_amd64.deb
            dist/executables/password-manager-${{env.RELEASE_VERSION}}.x86_64.rpm
            dist/executables/Password Manager-${{env.RELEASE_VERSION}}.AppImage
          if-no-files-found: error

  # Builds the windows executable application
  build-windows:
    runs-on: windows-latest
    needs: [get-release-version, build-web]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.2'

      - name: Download RELEASE_VERSION
        uses: actions/download-artifact@v3
        with:
          name: RELEASE_VERSION

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          echo "RELEASE_VERSION=`cat RELEASE_VERSION.txt`" >> $GITHUB_ENV

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache node modules
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: ${{steps.npm-cache-dir.outputs.dir}}
          key: ${{runner.os}}-node-${{hashFiles('**/pnpm-lock.yaml')}}
          restore-keys: |
            ${{runner.os}}-node-
            ${{runner.os}}-

      - name: Install NPM Dependencies
        run: pnpm run i

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: web-demo-build
          path: dist/apps/web

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist/apps/web

      - name: Build Linux Package
        run: pnpm run build:electron && pnpm run electron:make:win

      - name: Display structure of built files
        run: ls -R
        working-directory: dist/executables

      # - name: Zip Release
      #   uses: thedoctor0/zip-release@master
      #   with:
      #     type: 'zip'
      #     filename: Password Manager ${{env.RELEASE_VERSION}}.zip
      #     path: dist/executables/win-unpacked/

      - name: Zip Release
        uses: papeloto/action-zip@v1
        with:
          files: dist/executables/win-unpacked/
          dest: Password Manager ${{env.RELEASE_VERSION}}.zip

      - name: Archive electron app build
        # if: github.event == 'push' && success()
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: release-package-${{env.RELEASE_VERSION}}-windows
          path: |
            dist/executables/Password Manager Setup ${{env.RELEASE_VERSION}}.exe
            dist/executables/Password Manager ${{env.RELEASE_VERSION}}.exe
            ./Password Manager ${{env.RELEASE_VERSION}}.zip
          if-no-files-found: error

  # Ref: https://github.com/actions/create-release
  release:
    # if: github.event == 'push'
    runs-on: ubuntu-latest
    needs: [get-release-version, build-linux, build-windows]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.2'

      - name: Download RELEASE_VERSION
        uses: actions/download-artifact@v3
        with:
          name: RELEASE_VERSION

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          echo "RELEASE_VERSION=`cat RELEASE_VERSION.txt`" >> $GITHUB_ENV

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: release-package-${{env.RELEASE_VERSION}}-linux
          path: release-package-${{env.RELEASE_VERSION}}

      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: release-package-${{env.RELEASE_VERSION}}-windows
          path: release-package-${{env.RELEASE_VERSION}}

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release-package-${{env.RELEASE_VERSION}}

      # ====================================================================== #
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Password Manager v${{env.RELEASE_VERSION}}
          tag: v${{env.RELEASE_VERSION}}
          body: |
            Password Manager Desktop App.
            Saves data in non encrypted files only.

            ### Dowload in _Assets_ below
            * Click on the `dropdown` => `keep` in Chrome
            * <img src="https://github.com/deniszholob/playlist-maker/raw/main/screenshots/download-warning.png" width="300" />

            #### Linux
            * Make sure the files have 'Execute' permission: Right click => properties => permissions (on Linux Mint)
            * Double click to install .deb or .rpm, or to run .AppImage

            #### Windows
            * EITHER:
                * Run the setup installer `Password.Manager.Setup.${{env.RELEASE_VERSION}}.exe`
                * Run the portable version `Password.Manager.${{env.RELEASE_VERSION}}.exe`
                * Extract the `Password.Manager.${{env.RELEASE_VERSION}}.zip` contents and run the .exe inside that folder
            * Click on `More info` => `Run anyway` on the Windows Protection screen (Shows because I did not pay $$$ to do the windows signing process)
            * <img src="https://github.com/deniszholob/playlist-maker/raw/main/screenshots/windows-warning-info.png" width="335" />
              <img src="https://github.com/deniszholob/playlist-maker/raw/main/screenshots/windows-warning.png" width="260" />
            * Antivirus will probably freak out for a couple seconds, it does for me (same reason as above)
          artifacts: |
            ./release-package-${{env.RELEASE_VERSION}}/dist/executables/Password Manager Setup ${{env.RELEASE_VERSION}}.exe
            ./release-package-${{env.RELEASE_VERSION}}/dist/executables/Password Manager ${{env.RELEASE_VERSION}}.exe
            ./release-package-${{env.RELEASE_VERSION}}/Password Manager ${{env.RELEASE_VERSION}}.zip
            ./release-package-${{env.RELEASE_VERSION}}/Password Manager-${{env.RELEASE_VERSION}}.AppImage
            ./release-package-${{env.RELEASE_VERSION}}/password-manager-${{env.RELEASE_VERSION}}.x86_64.rpm
            ./release-package-${{env.RELEASE_VERSION}}/password-manager_${{env.RELEASE_VERSION}}_amd64.deb
          artifactErrorsFailBuild: true
          draft: false # true to create a draft (unpublished) release, false to create a published one. Default: false
